You will go through the following step as part of your demo:
  Set up Cloud9 to work with and demo the Docker CLI.
  Put a simple (pre-created) Flask application into a Docker Container.
  Store your Docker Image on ECR.
  Deploy it to the cloud using the Elastic Beanstalk console, and show it working.
  
docker help:
  A self-sufficient runtime for containers

  Options:
        --config string      Location of client config files (default "/home/ec2-user/.docker")
    -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker
                             context use")
    -D, --debug              Enable debug mode
    -H, --host list          Daemon socket(s) to connect to
    -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
        --tls                Use TLS; implied by --tlsverify
        --tlscacert string   Trust certs signed only by this CA (default "/home/ec2-user/.docker/ca.pem")
        --tlscert string     Path to TLS certificate file (default "/home/ec2-user/.docker/cert.pem")
        --tlskey string      Path to TLS key file (default "/home/ec2-user/.docker/key.pem")
        --tlsverify          Use TLS and verify the remote
    -v, --version            Print version information and quit

  Management Commands:
    builder     Manage builds
    config      Manage Docker configs
    container   Manage containers
    context     Manage contexts
    engine      Manage the docker engine
    image       Manage images
    network     Manage networks
    node        Manage Swarm nodes
    plugin      Manage plugins
    secret      Manage Docker secrets
    service     Manage services
    stack       Manage Docker stacks
    swarm       Manage Swarm
    system      Manage Docker
    trust       Manage trust on Docker images
    volume      Manage volumes

  Commands:
    attach      Attach local standard input, output, and error streams to a running container
    build       Build an image from a Dockerfile
    commit      Create a new image from a container's changes
    cp          Copy files/folders between a container and the local filesystem
    create      Create a new container
    diff        Inspect changes to files or directories on a container's filesystem
    events      Get real time events from the server
    exec        Run a command in a running container
    export      Export a container's filesystem as a tar archive
    history     Show the history of an image
    images      List images
    import      Import the contents from a tarball to create a filesystem image
    info        Display system-wide information
    inspect     Return low-level information on Docker objects
    kill        Kill one or more running containers
    load        Load an image from a tar archive or STDIN
    login       Log in to a Docker registry
    logout      Log out from a Docker registry
    logs        Fetch the logs of a container
    pause       Pause all processes within one or more containers
    port        List port mappings or a specific mapping for the container
    ps          List containers
    pull        Pull an image or a repository from a registry
    push        Push an image or a repository to a registry
    rename      Rename a container
    restart     Restart one or more containers
    rm          Remove one or more containers
    rmi         Remove one or more images
    run         Run a command in a new container
    save        Save one or more images to a tar archive (streamed to STDOUT by default)
    search      Search the Docker Hub for images
    start       Start one or more stopped containers
    stats       Display a live stream of container(s) resource usage statistics
    stop        Stop one or more running containers
    tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
    top         Display the running processes of a container
    unpause     Unpause all processes within one or more containers
    update      Update configuration of one or more containers
    version     Show the Docker version information
    wait        Block until one or more containers stop, then print their exit codes
  
docker run -it scare_me bin/sh
  It would open interactive shell to see what inside the container . Normally we won't do this  if you are deploying. 
  However it's a great way to show your students how to not only run but interact with that "soon to be running" container.
CMD["executible", "param"]
  There can be only one CMD in the docker file , if there are many only the last one will execute . The main purpose of a CMD is to provide defaults for 
  an executing container.
docker exec -d flask-tutorial touch /tmp/test   
  exec command to run a command in a running container 
  
In order to be able to push our Docker image to ECR first we will use the CLI. You tell them that you will first need to 
authorize your Cloud9 docker client with the AWS CLI's ecr get-login command:
  aws ecr get-login --region us-west-2 --no-include-email
this command will give you the detaisl to login just copy and paste it in terminal 
We will get following response:
  WARNING! Using --password via the CLI is insecure. Use --password-stdin.
  WARNING! Your password will be stored unencrypted in /home/ec2-user/.docker/config.json.
  Configure a credential helper to remove this warning. See
  https://docs.docker.com/engine/reference/commandline/login/#credentials-store
  â€‹
  Login Succeeded
Now Create a repository to store the images :
  aws ecr create-repository --repository-name flask-tutorial
push the images to aws ecr:
  docker push 
now list the images inside AWS ECR:
  aws ecr list-images --repository-name flask-tutorial
    
